<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns="http://xmlns.jcp.org/xml/ns/javaee" 
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee 
    http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd" version="3.1">
    
    <!-- 所有Servlet都可以获取到的公共初始化参数 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
  
  <!-- 配置 SpringMVC 前端控制器 DispatcherServlet(核心调度器) -->
  <servlet>
      <servlet-name>springDispatcherServlet</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <!-- 指定SpringMVC配置文件spring-config.xml，用来将拦截的对应请求分发给对应的Controller-->
      <init-param>
      	  <!-- 用键值对形式配置本Servlet的初始化参数 -->
      	  <!-- 可以由ServletConfig获取 -->
      	  <!-- ServletConfig也可以获取ServletContext -->
      	  <!-- ServletContext代表web应用！！！ -->
      	  <!-- 整个web应用的所有的类、servlet共享一个ServletContext -->
      	  <!-- ServletContext的生命周期与web应用的开启关闭一致 -->
          <param-name>contextConfigLocation</param-name>
          <param-value>classpath:springmvc.xml</param-value>
      </init-param>
      <!-- Servlet随web容器启动而创建 -->
      <!-- 数字越小优先级越高，负数则第一次请求被创建 -->
      <load-on-startup>1</load-on-startup>
  </servlet>
  
  <!-- 指定该springmvc的Servlet可以拦截的请求为所有请求（"/"）,
       之后可以分发给对应的Controller-->
  <servlet-mapping>
      <servlet-name>springDispatcherServlet</servlet-name>
      <!-- ‘/’: 根目录下的所有地址，包括:静态，所有 url 地址，但是不包括其他 Servlet 
      		不要用 ‘/*’， 一般用在拦截器上
      -->
      <!-- Servlet通过url-pattern找到配置的servlet-name -->
      <!-- 再通过servlet-name找到servlet-class -->
      <!-- 反射创建Servlet实例 -->
      <url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <!-- 配置 org.springframework.web.filter.HiddenHttpMethodFilter:可以把POST请求转为DELETE或者PUT请求 -->
  	<filter>
  		<filter-name>HiddenHttpMethodFilter</filter-name>
  		<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  	</filter>
  	
  	<filter-mapping>
  		<filter-name>HiddenHttpMethodFilter</filter-name>
  		<url-pattern>/*</url-pattern>
  	</filter-mapping>
  	
  	<!-- 解决懒加载的异常 -->
  	<filter>
  		 <filter-name>OpenSessionInViewFilter</filter-name>
  		 <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class>
  	</filter>
  	
  	<filter-mapping>
  		<filter-name>OpenSessionInViewFilter</filter-name>
  		<url-pattern>/*</url-pattern>
  	</filter-mapping>
</web-app>
